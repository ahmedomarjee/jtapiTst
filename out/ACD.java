package by.et.jtapi.tst;

import java.awt.*;
import java.applet.*;
import javax.telephony.*;
import javax.telephony.events.*;
import javax.telephony.callcenter.*;
import javax.telephony.callcenter.events.*;

import com.avaya.jtapi.tsapi.*;


/**
 * Created with IntelliJ IDEA.
 * User: Administrator
 * Date: 6/19/14
 * Time: 6:57 AM
 * To change this template use File | Settings | File Templates.
 */
public class ACD extends Applet implements ProviderObserver
{
    String          acd;
    String          agent1 = null;
    String          agent2 = null;
    Provider        provider;
    Address         myAddress;

    public synchronized void init()
    {
        JtapiPeer       jtapiPeer;
        String          service = null;
        String          login = null;
        String          password = null;
        String          callingDev = null;
        String          jtapiClass = null;
        String          providerString;

        // This code is automatically generated by Visual Cafe when you add
        // components to the visual environment. It instantiates and initializes
        // the components. To modify the code, only use code syntax that matches
        // what Visual Cafe can generate, or Visual Cafe may be unable to back
        // parse your Java file into its visual environment.
        //{{INIT_CONTROLS
        setLayout(null);
        setSize(340,170);
        add(trace);
        trace.setFont(new Font("SansSerif", Font.PLAIN, 11));
        trace.setBounds(0,0,340,170);
        //}}

        // get class name that implements JTAPI
        jtapiClass = getParameter("JTAPICLASS");

        // get tlink parameter from html file
        service = getParameter("SERVICENAME");
        if (service != null)
        {
            service.toUpperCase();
        }

        // get login parameter from html file
        login = getParameter("LOGIN");

        // get user password from html file
        password = getParameter("PASSWORD");

        // get ACD number from html file
        acd = getParameter("ACD");

        // get agent1 device from html file
        agent1 = getParameter("AGENT1");

        // get agent2 device from html file
        agent2 = getParameter("AGENT2");

        providerString = service + ";loginID=" + login + ";passwd=" + password;

        try
        {
            jtapiPeer = JtapiPeerFactory.getJtapiPeer(jtapiClass);
            provider = jtapiPeer.getProvider(providerString);
            trace.append("Provider created successfully.\n\n");
            trace.append("Waiting for the provider to initialize...\n");

            //add a ProviderObserver to the provider
            provider.addObserver( this );

            // wait to be notified when the provider is in service --
            // corresponding notify is in the providerChangedEvent() method
            wait ();
            trace.append( "Provider is in service.\n\n" );
        }
        catch (Exception e)
        {
            trace.append( "init() caught exception " + e.getClass().getName() + "\n" );
            trace.append( "Message: " + e.getMessage() + "\n\n" );
            trace.append( "Provider could not be created.\nVerify parameters in the HTML page are correct.\n\n" );
        }

        //{{REGISTER_LISTENERS
        SymComponent aSymComponent = new SymComponent();
        this.addComponentListener(aSymComponent);
        //}}
    }

    //{{DECLARE_CONTROLS
    MyTextArea trace = new MyTextArea();
    //}}

    class SymComponent extends java.awt.event.ComponentAdapter
    {
        public void componentResized(java.awt.event.ComponentEvent event)
        {
            Object object = event.getSource();
            if (object == ACD.this)
                ACD_componentResized(event);
        }
    }

    void ACD_componentResized(java.awt.event.ComponentEvent event)
    {
        try {
            trace.setSize( event.getComponent().getSize() );
        } catch (Exception e) {
        }
    }

    public void start()
    {
        ACDAddress[]    acdAddresses = null;
        Agent[]         agents = null;
        ACDAddress      myACDAddress = null;
        MyACDObserver   myACDObserver;
        Agent           myAgent1 = null;
        Agent           myAgent2 = null;
        AgentTerminal   myAgent1Terminal = null;
        AgentTerminal   myAgent2Terminal = null;
        Address         myAgent1Address = null;
        Address         myAgent2Address = null;

        showStatus ( "ACD applet executing, please wait..." );

        if (provider != null) {

            try {

                if (provider instanceof CallCenterProvider) {

                    try {
                        acdAddresses = ( (CallCenterProvider) provider).getACDAddresses();
                    } catch(Exception e) {
                        trace.append ( "Could not obtain ACDAddresses from Provider.\n\n" );
                        throw (e);
                    }

                    if (acdAddresses != null) {

                        trace.append("ACDAddresses for this provider:" + "\n");

                        for(int i=0; i<acdAddresses.length; i++) {
                            trace.append("\tACDAddress=" + acdAddresses[i].getName() + "\n");
                        }

                        trace.append("\n");

                        for(int i=0; i<acdAddresses.length; i++) {

                            try {
                                agents = acdAddresses[i].getLoggedOnAgents();
                            } catch(Exception e) {
                                trace.append( "Could not obtain logged on agents.\n\n" );
                            }

                            if (agents != null) {

                                trace.append("Agents at " +  acdAddresses[i].getName() + ":\n");
                                for(int k=0; k<agents.length; k++) {
                                    trace.append("\tAgent[" + k + "]=" + agents[k].getAgentTerminal().getName() + "\n");
                                }
                                trace.append("\n");
                            } else {
                                trace.append("Agents at " +  acdAddresses[i].getName() + ": <none>\n\n");
                            }
                        }
                    } else {
                        trace.append("ACDAddresses for this provider: <none>\n\n");
                    }
                }

                try {
                    myAddress = provider.getAddress(acd);
                } catch (Exception e) {
                    trace.append ( "Please verify ACD address is correct.\n\n" );
                    throw (e);
                }

                //if Address returned does not implement ACDAddress return
                if (!(myAddress instanceof ACDAddress)) {
                    trace.append("Address" + myAddress.getName() + "doesn't implement ACDAddress\n\n");
                    return;
                }

                myACDAddress = (ACDAddress)myAddress;

                agents = null;
                try {
                    agents = myACDAddress.getLoggedOnAgents();
                } catch(Exception e) {
                    trace.append( "Could not obtain logged on agents.\n\n" );
                    throw (e);
                }

                trace.append("Agents/States currently at " +  myACDAddress.getName() + ":\n");

                if (agents != null) {
                    for(int i=0; i<agents.length; i++) {
                        trace.append("\tAgent[" + i + "]=" + agents[i].getAgentTerminal().getName() +
                                " State: " + stateToString(agents[i].getState()) + "\n");
                    }
                    trace.append("\n");
                } else {
                    trace.append("There are no agents currently logged in.\n\n");
                }

                myACDObserver = new MyACDObserver(trace);

                // add observer on my ACD Address
                myAddress.addObserver(myACDObserver);

                trace.append("Trying to log in agents: " + agent1 + ", " + agent2 + " to ACD " + myAddress.getName() + "...\n\n");

                myAgent1Address = provider.getAddress(agent1);
                myAgent2Address = provider.getAddress(agent2);
                myAgent1Terminal = (AgentTerminal)provider.getTerminal(agent1);
                myAgent2Terminal = (AgentTerminal)provider.getTerminal(agent2);

                //log agents in using AgentTerminal.addAgent()
                //Note that in a skills environment, the ACDAddress maybe

                if (myAgent1Terminal != null) {

                    try {
                        myAgent1 = myAgent1Terminal.addAgent(myAgent1Address,   //Agent's address
                                myACDAddress,      //ACD's address
                                Agent.LOG_IN,      //Agent's initial state
                                agent1,            //Agent ID
                                "");               //Agent password
                    } catch(Exception e) {
                        trace.append( "Unable to log in agent " + agent1 + ".\n\n" );
                    }
                } else {
                    trace.append( "Agent terminal for " + agent1 + "is null.\n\n" );
                }

                if (myAgent2Terminal != null) {

                    try {
                        myAgent2 = myAgent2Terminal.addAgent(myAgent2Address,   //Agent's address
                                myACDAddress,               //ACD's address
                                Agent.LOG_IN,               //Agent's initial state
                                agent2,                     //Agent ID
                                "");                        //Agent password
                    } catch(Exception e) {
                        trace.append( "Unable to log in agent " + agent2 + ".\n\n" );
                    }
                } else {
                    trace.append( "Agent terminal for " + agent2 + "is null.\n\n" );
                }

                if (myACDAddress != null) {

                    try {
                        agents = myACDAddress.getLoggedOnAgents();
                    } catch(Exception e) {
                        trace.append( "Could not obtain logged in agents.\n\n" );
                    }

                    Thread.sleep (2000);
                    trace.append("Agents/State/WorkMode currently at " +  myACDAddress.getName() + ":\n");
                    if (agents != null) {

                        for(int i=0; i<agents.length; i++) {
                            LucentAgentStateInfo stateInfo = ( (LucentAgent)agents[i]).getStateInfo();

                            if ( (stateInfo.state != Agent.LOG_OUT) &&
                                    (stateInfo.workMode != LucentAgent.MODE_AUTO_IN) ) {

                                try {
                                    ( (LucentAgent)agents[i]).setState(Agent.READY, LucentAgent.MODE_AUTO_IN);
                                } catch(Exception e) {
                                    trace.append( "Could not set agent state.\n\n" );
                                }
                            }
                            stateInfo = ( (LucentAgent)agents[i]).getStateInfo();
                            trace.append("\tAgent[" + i + "]=" + agents[i].getAgentTerminal().getName() +
                                    "\tState: " + stateToString(stateInfo.state) +
                                    "\tWorkMode: " + modeToString(stateInfo.workMode) + "\n");
                        }
                    }
                    trace.append("\n");

                    trace.append("Trying to log out agents: " + agent1 + ", " + agent2 + " from ACD " + myAddress.getName() + "...\n\n");

                    if ( myAgent1 != null ) {
                        myAgent1Terminal.removeAgent(myAgent1);
                    }
                    if ( myAgent2 != null ) {
                        myAgent2Terminal.removeAgent(myAgent2);
                    }
                } else {
                    trace.append( "ACD address for " + acd + "is null.\n\n" );
                }
            } catch (Exception e) {
                trace.append("start() caught " + e + "\n");
                trace.append( "Message: " + e.getMessage() + "\n\n" );
            }
        }
        showStatus ( "ACD applet finished execution." );
    }

    public String stateToString(int state) {

        String strState;

        switch (state) {
            case (Agent.LOG_IN):
                strState = "LOG_IN";
                break;
            case (Agent.LOG_OUT):
                strState = "LOG_OUT";
                break;
            case (Agent.NOT_READY):
                strState = "NOT_READY";
                break;
            case (Agent.READY):
                strState = "READY";
                break;
            case (Agent.WORK_NOT_READY):
                strState = "WORK_NOT_READY";
                break;
            case (Agent.WORK_READY):
                strState = "WORK_READY";
                break;
            case (Agent.BUSY):
                strState = "BUSY";
                break;
            case (Agent.UNKNOWN):
                strState = "UNKNOWN";
                break;
            default:
                strState = "Other: " + state;
                break;
        }
        return strState;
    }

    public static String modeToString(int mode) {

        String strMode;

        switch (mode)
        {
            case LucentAgent.MODE_AUTO_IN :
                strMode = "MODE_AUTO_IN";
                break;
            case LucentAgent.MODE_MANUAL_IN :
                strMode = "MODE_MANUAL_IN";
                break;
            case LucentAgent.MODE_NONE :
                strMode = "MODE_NONE";
                break;
            default:
                strMode = "Other: " + mode;
                break;
        }
        return strMode;
    }

    /**
     * This method is required to implement the ProviderObserver --
     * the implementation will call this routine to notify state changes
     * in the Provider.
     */
    public synchronized void providerChangedEvent ( ProvEv[] eventList )
    {
        for ( int i=0; i<eventList.length; i++ )
        {
            switch(eventList[i].getID())
            {
                case ProvInServiceEv.ID:        //handle provider in service
                    notify ();                  //init() is waiting on this event
                    break;
                default:
                    break;
            }
        }
    }
}

class MyACDObserver implements ACDAddressObserver
{
    MyACDObserver() {
    }

    MyACDObserver ( MyTextArea traceArea ) {
        this();
        trace = traceArea;
    }

    public void addressChangedEvent(AddrEv[] event)
    {
        for(int i=0; i<event.length; i++)
        {
            if(!(event[i] instanceof ACDAddrEv))
                return;

            ACDAddrEv aaEvent = (ACDAddrEv)event[i];

            switch(aaEvent.getID())
            {
                case ACDAddrBusyEv.ID:
                {
                    trace.append("Received ACD Addr Busy Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrLoggedOffEv.ID:
                {
                    trace.append("Received ACD Addr Logged Off Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrLoggedOnEv.ID:
                {
                    trace.append("Received ACD Addr Logged On Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrNotReadyEv.ID:
                {
                    trace.append("Received ACD Not Ready Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrReadyEv.ID:
                {
                    trace.append("Received ACD Addr Ready Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrUnknownEv.ID:
                {
                    trace.append("Received ACD Addr Unknown Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrWorkNotReadyEv.ID:
                {
                    trace.append("Received ACD Addr Work Not Ready Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() + "\n");
                    break;
                }
                case ACDAddrWorkReadyEv.ID:
                {
                    trace.append("Received ACD Addr Work Ready Ev - Agent: " +
                            aaEvent.getAgent().getAgentTerminal().getName() +  "\n");
                    break;
                }
                default:
                    break;
            }
        }
    }
    MyTextArea trace;
}

